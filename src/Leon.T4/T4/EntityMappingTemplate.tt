<#+
// <copyright file="EntityMappingTemplate.tt" company="Leon">
//  Copyright ©Leon.Net . All Rights Reserved.
// </copyright>

public class EntityMappingTemplate : CSharpTemplate
{
	private T4EntityInfo _entity;

	public EntityMappingTemplate(T4EntityInfo entity)
	{
		_entity = entity;
	}

	public string FileName
	{
		get{
			return string.Format("{0}Mapping.generated.cs", _entity.Name);
		}
	}

	public override string TransformText()
	{
		
#>

//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//     如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类实现 <#= _entity.Name #>MappingAppend 分部方法。
// </auto-generated>
//
// <copyright file="<#= _entity.Name #>Mapping.generated.cs">
//        Copyright(c)2013 Leon.All rights reserved.
//        开发组织：Leon
//        所属工程：Leon.Data
//        生成时间：<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------
using System;
using Leon.Core.Domain.Authority;
using Leon.Core.Repository;


namespace Leon.Data.Mapping
{
	public partial class <#= _model.Name #>Mapping : EntityBaseMapping<<#= _model.Name #>>
	{
		public <#= _model.Name #>Mapping()
		{
			<#=
			Type type = typeof(_entity);
			PropertyInfo[] props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            foreach (PropertyInfo prop in props
            {            
			#>
				this.Property(t => t.<#=prop.Name#>);
			<#=
			}
			#>
		}
	}	
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
